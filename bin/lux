#!/usr/bin/env node

'use strict';

const { EOL } = require('os');
const path = require('path');

const cli = require('commander');
const { red, green } = require('chalk');

const { version: VERSION } = require('../package.json');

function inLuxProject() {
  const cwd = process.cwd();

  if (cwd.indexOf(path.join('lux', 'test', 'test-app')) >= 0) {
    return true;
  }

  try {
    const { dependencies } = require(path.join(cwd, 'package.json'));
    return Boolean(dependencies['lux-framework']);
  } catch (err) {
    return false;
  }
}

function commandNotFound(cmd) {
  // eslint-disable-next-line no-console
  console.log(
    `${EOL}  ${red(cmd)} is not a valid command.${EOL.repeat(2)}`,
    ` Use ${green('lux --help')} for a full list of commands.${EOL}`
  );
}

function setEnvVar(key, val, def) {
  if (val) {
    Reflect.set(process.env, key, val);
  } else if (!Reflect.has(process.env, key)) {
    Reflect.set(process.env, key, def);
  }
}

function exec(cmd, ...args) {
  const handler = require('../dist')[cmd];
  const needsProject = new RegExp(
    '^(?:db:.+|test|build|serve|console|generate|destroy)$'
  );

  if (needsProject.test(cmd) && !inLuxProject()) {
    return Promise.reject(new Error(
      'Directory does not contain a valid Lux application.'
    ));
  }

  return handler(...args);
}

function exit(code) {
  process.exit(typeof code === 'number' ? code : 0);
}

function rescue(err) {
  // eslint-disable-next-line
  console.error(err.stack);
  exit(1);
}

cli.version(VERSION);

cli
  .command('n <name>')
  .alias('new')
  .description('Create a new application')
  .option(
    '--database [database]',
    'Database driver',
    /^(postgres|sqlite|mysql|mariadb|oracle)$/i,
    'sqlite'
  )
  .action((name, { database }) => {
    exec('create', name, database)
      .then(exit)
      .catch(rescue);
  });

cli
  .command('t')
  .alias('test')
  .description('Run your application\'s test suite')
  .action(() => {
    exec('test')
      .then(exit)
      .catch(rescue);
  });

cli
  .command('b')
  .alias('build')
  .description('Build your application')
  .option('-w, --use-weak', 'Use weak mode')
  .action(({ useWeak }) => {
    exec('build', !useWeak)
      .then(exit)
      .catch(rescue);
  });

cli
  .command('c')
  .alias('console')
  .description('Load your application into a repl')
  .option('-e, --environment [env]', '(Default: development)')
  .option('-w, --use-weak', 'Use weak mode')
  .action(({ environment, useWeak }) => {
    setEnvVar('NODE_ENV', environment, 'development');
    process.env.LUX_CONSOLE = true;

    exec('build', !useWeak)
      .then(() => exec('repl'))
      .then(exit)
      .catch(rescue);
  });

cli
  .command('s')
  .alias('serve')
  .description('Serve your application')
  .option('-c, --cluster', 'Run in cluster mode')
  .option('-e, --environment [env]', '(Default: development)')
  .option(
    '-p, --port [port]',
    '(Default: 4000)',
    port => Number.parseInt(port, 10)
  )
  .option('-H, --hot', 'Reload when a file change is detected')
  .option('-w, --use-weak', 'Use weak mode')
  .action(({ hot, port, cluster, environment, useWeak }) => {
    const useStrict = !useWeak;

    setEnvVar('PORT', port, 4000);
    setEnvVar('NODE_ENV', environment, 'development');

    exec('build', useStrict)
      .then(() => exec('serve', { hot, cluster, useStrict }))
      .catch(rescue);
  });

cli
  .command('g <type> <name> [attrs...]')
  .alias('generate')
  .description('Example: lux generate model user')
  .action((type, name, attrs) => {
    exec('generate', { type, name, attrs })
      .then(exit)
      .catch(rescue);
  });

cli
  .command('d')
  .alias('destroy <type> <name>')
  .description('Example: lux destroy model user')
  .action((type, name) => {
    exec('destroy', { type, name })
      .then(exit)
      .catch(rescue);
  });

cli
  .command('db:create')
  .description('Create your database schema')
  .option('-w, --use-weak', 'Use weak mode')
  .action(({ useWeak }) => {
    exec('build', !useWeak)
      .then(() => exec('dbcreate'))
      .then(exit)
      .catch(rescue);
  });

cli
  .command('db:drop')
  .description('Drop your database schema')
  .option('-w, --use-weak', 'Use weak mode')
  .action(({ useWeak }) => {
    exec('build', !useWeak)
      .then(() => exec('dbdrop'))
      .then(exit)
      .catch(rescue);
  });

cli
  .command('db:reset')
  .description('Drop your database schema and create a new schema')
  .option('-w, --use-weak', 'Use weak mode')
  .action(({ useWeak }) => {
    exec('build', !useWeak)
      .then(() => exec('dbdrop'))
      .then(() => exec('dbcreate'))
      .then(exit)
      .catch(rescue);
  });

cli
  .command('db:migrate')
  .description('Run database migrations')
  .option('-w, --use-weak', 'Use weak mode')
  .action(({ useWeak }) => {
    exec('build', !useWeak)
      .then(() => exec('dbmigrate'))
      .then(exit)
      .catch(rescue);
  });

cli
  .command('db:rollback')
  .description('Rollback the last database migration')
  .option('-w, --use-weak', 'Use weak mode')
  .action(({ useWeak }) => {
    exec('build', !useWeak)
      .then(() => exec('dbrollback'))
      .then(exit)
      .catch(rescue);
  });

cli
  .command('db:seed')
  .description('Add fixtures to your db from the seed function')
  .option('-w, --use-weak', 'Use weak mode')
  .action(({ useWeak }) => {
    exec('build', !useWeak)
      .then(() => exec('dbseed'))
      .then(exit)
      .catch(rescue);
  });

cli
  .on('*', commandNotFound)
  .parse(process.argv);

if (!cli.args.length) {
  cli.help();
}
